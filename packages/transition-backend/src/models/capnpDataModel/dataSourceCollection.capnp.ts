/* tslint:disable */

/**
 * This file has been automatically generated by the [capnpc-ts utility](https://github.com/jdiaz5513/capnp-ts).
 */

import * as capnp from 'capnp-ts';
import { ObjectSize as __O, Struct as __S } from 'capnp-ts';
import { DataSource } from './dataSource.capnp';
export const _capnpFileId = 'c4d1311aba086738';
export class DataSourceCollection extends __S {
    static readonly _capnp = { displayName: 'DataSourceCollection', id: 'c67c47e56cc5fbb5', size: new __O(0, 1) };
    static _DataSources: capnp.ListCtor<DataSource>;
    adoptDataSources(value: capnp.Orphan<capnp.List<DataSource>>): void {
        __S.adopt(value, __S.getPointer(0, this));
    }
    disownDataSources(): capnp.Orphan<capnp.List<DataSource>> {
        return __S.disown(this.getDataSources());
    }
    getDataSources(): capnp.List<DataSource> {
        return __S.getList(0, DataSourceCollection._DataSources, this);
    }
    hasDataSources(): boolean {
        return !__S.isNull(__S.getPointer(0, this));
    }
    initDataSources(length: number): capnp.List<DataSource> {
        return __S.initList(0, DataSourceCollection._DataSources, length, this);
    }
    setDataSources(value: capnp.List<DataSource>): void {
        __S.copyFrom(value, __S.getPointer(0, this));
    }
    toString(): string {
        return 'DataSourceCollection_' + super.toString();
    }
}
DataSourceCollection._DataSources = capnp.CompositeList(DataSource);
