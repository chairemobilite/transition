/* tslint:disable */

/**
 * This file has been automatically generated by the [capnpc-ts utility](https://github.com/jdiaz5513/capnp-ts).
 */

import * as capnp from 'capnp-ts';
import { ObjectSize as __O, Struct as __S } from 'capnp-ts';
export const _capnpFileId = 'a099e4ab58cfbe39';
export class Node extends __S {
    static readonly _capnp = { displayName: 'Node', id: 'ae0002d27ded297e', size: new __O(24, 8) };
    getUuid(): string {
        return __S.getText(0, this);
    }
    setUuid(value: string): void {
        __S.setText(0, value, this);
    }
    getId(): number {
        return __S.getUint32(0, this);
    }
    setId(value: number): void {
        __S.setUint32(0, value, this);
    }
    getInternalId(): string {
        return __S.getText(1, this);
    }
    setInternalId(value: string): void {
        __S.setText(1, value, this);
    }
    getCode(): string {
        return __S.getText(2, this);
    }
    setCode(value: string): void {
        __S.setText(2, value, this);
    }
    getName(): string {
        return __S.getText(3, this);
    }
    setName(value: string): void {
        __S.setText(3, value, this);
    }
    getLatitude(): number {
        return __S.getInt32(4, this);
    }
    setLatitude(value: number): void {
        __S.setInt32(4, value, this);
    }
    getLongitude(): number {
        return __S.getInt32(8, this);
    }
    setLongitude(value: number): void {
        __S.setInt32(8, value, this);
    }
    getStationUuid(): string {
        return __S.getText(4, this);
    }
    setStationUuid(value: string): void {
        __S.setText(4, value, this);
    }
    getColor(): string {
        return __S.getText(5, this);
    }
    setColor(value: string): void {
        __S.setText(5, value, this);
    }
    getDescription(): string {
        return __S.getText(6, this);
    }
    setDescription(value: string): void {
        __S.setText(6, value, this);
    }
    getData(): string {
        return __S.getText(7, this);
    }
    setData(value: string): void {
        __S.setText(7, value, this);
    }
    getIsEnabled(): number {
        return __S.getInt8(12, this);
    }
    setIsEnabled(value: number): void {
        __S.setInt8(12, value, this);
    }
    getRoutingRadiusMeters(): number {
        return __S.getInt16(14, this);
    }
    setRoutingRadiusMeters(value: number): void {
        __S.setInt16(14, value, this);
    }
    getDefaultDwellTimeSeconds(): number {
        return __S.getInt16(16, this);
    }
    setDefaultDwellTimeSeconds(value: number): void {
        __S.setInt16(16, value, this);
    }
    getIsFrozen(): number {
        return __S.getInt8(13, this);
    }
    setIsFrozen(value: number): void {
        __S.setInt8(13, value, this);
    }
    toString(): string {
        return 'Node_' + super.toString();
    }
}
export class NodeCollection extends __S {
    static readonly _capnp = { displayName: 'NodeCollection', id: 'b03326c4149f8dc8', size: new __O(0, 1) };
    static _Nodes: capnp.ListCtor<Node>;
    adoptNodes(value: capnp.Orphan<capnp.List<Node>>): void {
        __S.adopt(value, __S.getPointer(0, this));
    }
    disownNodes(): capnp.Orphan<capnp.List<Node>> {
        return __S.disown(this.getNodes());
    }
    getNodes(): capnp.List<Node> {
        return __S.getList(0, NodeCollection._Nodes, this);
    }
    hasNodes(): boolean {
        return !__S.isNull(__S.getPointer(0, this));
    }
    initNodes(length: number): capnp.List<Node> {
        return __S.initList(0, NodeCollection._Nodes, length, this);
    }
    setNodes(value: capnp.List<Node>): void {
        __S.copyFrom(value, __S.getPointer(0, this));
    }
    toString(): string {
        return 'NodeCollection_' + super.toString();
    }
}
NodeCollection._Nodes = capnp.CompositeList(Node);
