/* tslint:disable */

/**
 * This file has been automatically generated by the [capnpc-ts utility](https://github.com/jdiaz5513/capnp-ts).
 */

import * as capnp from 'capnp-ts';
import { ObjectSize as __O, Struct as __S } from 'capnp-ts';
export const _capnpFileId = 'd86f051f59fb1b95';
export class Service extends __S {
    static readonly _capnp = { displayName: 'Service', id: 'b43b93e1c1ad0616', size: new __O(16, 11) };
    getUuid(): string {
        return __S.getText(0, this);
    }
    setUuid(value: string): void {
        __S.setText(0, value, this);
    }
    getName(): string {
        return __S.getText(1, this);
    }
    setName(value: string): void {
        __S.setText(1, value, this);
    }
    getInternalId(): string {
        return __S.getText(2, this);
    }
    setInternalId(value: string): void {
        __S.setText(2, value, this);
    }
    getMonday(): number {
        return __S.getInt8(0, this);
    }
    setMonday(value: number): void {
        __S.setInt8(0, value, this);
    }
    getTuesday(): number {
        return __S.getInt8(1, this);
    }
    setTuesday(value: number): void {
        __S.setInt8(1, value, this);
    }
    getWednesday(): number {
        return __S.getInt8(2, this);
    }
    setWednesday(value: number): void {
        __S.setInt8(2, value, this);
    }
    getThursday(): number {
        return __S.getInt8(3, this);
    }
    setThursday(value: number): void {
        __S.setInt8(3, value, this);
    }
    getFriday(): number {
        return __S.getInt8(4, this);
    }
    setFriday(value: number): void {
        __S.setInt8(4, value, this);
    }
    getSaturday(): number {
        return __S.getInt8(5, this);
    }
    setSaturday(value: number): void {
        __S.setInt8(5, value, this);
    }
    getSunday(): number {
        return __S.getInt8(6, this);
    }
    setSunday(value: number): void {
        __S.setInt8(6, value, this);
    }
    getStartDate(): string {
        return __S.getText(3, this);
    }
    setStartDate(value: string): void {
        __S.setText(3, value, this);
    }
    getEndDate(): string {
        return __S.getText(4, this);
    }
    setEndDate(value: string): void {
        __S.setText(4, value, this);
    }
    adoptOnlyDates(value: capnp.Orphan<capnp.List<string>>): void {
        __S.adopt(value, __S.getPointer(5, this));
    }
    disownOnlyDates(): capnp.Orphan<capnp.List<string>> {
        return __S.disown(this.getOnlyDates());
    }
    getOnlyDates(): capnp.List<string> {
        return __S.getList(5, capnp.TextList, this);
    }
    hasOnlyDates(): boolean {
        return !__S.isNull(__S.getPointer(5, this));
    }
    initOnlyDates(length: number): capnp.List<string> {
        return __S.initList(5, capnp.TextList, length, this);
    }
    setOnlyDates(value: capnp.List<string>): void {
        __S.copyFrom(value, __S.getPointer(5, this));
    }
    adoptExceptDates(value: capnp.Orphan<capnp.List<string>>): void {
        __S.adopt(value, __S.getPointer(6, this));
    }
    disownExceptDates(): capnp.Orphan<capnp.List<string>> {
        return __S.disown(this.getExceptDates());
    }
    getExceptDates(): capnp.List<string> {
        return __S.getList(6, capnp.TextList, this);
    }
    hasExceptDates(): boolean {
        return !__S.isNull(__S.getPointer(6, this));
    }
    initExceptDates(length: number): capnp.List<string> {
        return __S.initList(6, capnp.TextList, length, this);
    }
    setExceptDates(value: capnp.List<string>): void {
        __S.copyFrom(value, __S.getPointer(6, this));
    }
    getColor(): string {
        return __S.getText(7, this);
    }
    setColor(value: string): void {
        __S.setText(7, value, this);
    }
    getIsEnabled(): number {
        return __S.getInt8(7, this);
    }
    setIsEnabled(value: number): void {
        __S.setInt8(7, value, this);
    }
    getDescription(): string {
        return __S.getText(8, this);
    }
    setDescription(value: string): void {
        __S.setText(8, value, this);
    }
    getData(): string {
        return __S.getText(9, this);
    }
    setData(value: string): void {
        __S.setText(9, value, this);
    }
    getIsFrozen(): number {
        return __S.getInt8(8, this);
    }
    setIsFrozen(value: number): void {
        __S.setInt8(8, value, this);
    }
    getSimulationUuid(): string {
        return __S.getText(10, this);
    }
    setSimulationUuid(value: string): void {
        __S.setText(10, value, this);
    }
    toString(): string {
        return 'Service_' + super.toString();
    }
}
export class ServiceCollection extends __S {
    static readonly _capnp = { displayName: 'ServiceCollection', id: 'bf2e2f3d4b672cfc', size: new __O(0, 1) };
    static _Services: capnp.ListCtor<Service>;
    adoptServices(value: capnp.Orphan<capnp.List<Service>>): void {
        __S.adopt(value, __S.getPointer(0, this));
    }
    disownServices(): capnp.Orphan<capnp.List<Service>> {
        return __S.disown(this.getServices());
    }
    getServices(): capnp.List<Service> {
        return __S.getList(0, ServiceCollection._Services, this);
    }
    hasServices(): boolean {
        return !__S.isNull(__S.getPointer(0, this));
    }
    initServices(length: number): capnp.List<Service> {
        return __S.initList(0, ServiceCollection._Services, length, this);
    }
    setServices(value: capnp.List<Service>): void {
        __S.copyFrom(value, __S.getPointer(0, this));
    }
    toString(): string {
        return 'ServiceCollection_' + super.toString();
    }
}
ServiceCollection._Services = capnp.CompositeList(Service);
