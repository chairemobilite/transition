/* tslint:disable */

/**
 * This file has been automatically generated by the [capnpc-ts utility](https://github.com/jdiaz5513/capnp-ts).
 */

import * as capnp from 'capnp-ts';
import { ObjectSize as __O, Struct as __S } from 'capnp-ts';
export const _capnpFileId = '9b44b39f61ff2481';
export class Scenario extends __S {
    static readonly _capnp = { displayName: 'Scenario', id: 'd02bfb3e8aaf660b', size: new __O(8, 15) };
    getUuid(): string {
        return __S.getText(0, this);
    }
    setUuid(value: string): void {
        __S.setText(0, value, this);
    }
    getName(): string {
        return __S.getText(1, this);
    }
    setName(value: string): void {
        __S.setText(1, value, this);
    }
    getColor(): string {
        return __S.getText(2, this);
    }
    setColor(value: string): void {
        __S.setText(2, value, this);
    }
    getIsEnabled(): number {
        return __S.getInt8(0, this);
    }
    setIsEnabled(value: number): void {
        __S.setInt8(0, value, this);
    }
    getDescription(): string {
        return __S.getText(3, this);
    }
    setDescription(value: string): void {
        __S.setText(3, value, this);
    }
    getData(): string {
        return __S.getText(4, this);
    }
    setData(value: string): void {
        __S.setText(4, value, this);
    }
    adoptServicesUuids(value: capnp.Orphan<capnp.List<string>>): void {
        __S.adopt(value, __S.getPointer(5, this));
    }
    disownServicesUuids(): capnp.Orphan<capnp.List<string>> {
        return __S.disown(this.getServicesUuids());
    }
    getServicesUuids(): capnp.List<string> {
        return __S.getList(5, capnp.TextList, this);
    }
    hasServicesUuids(): boolean {
        return !__S.isNull(__S.getPointer(5, this));
    }
    initServicesUuids(length: number): capnp.List<string> {
        return __S.initList(5, capnp.TextList, length, this);
    }
    setServicesUuids(value: capnp.List<string>): void {
        __S.copyFrom(value, __S.getPointer(5, this));
    }
    adoptOnlyLinesUuids(value: capnp.Orphan<capnp.List<string>>): void {
        __S.adopt(value, __S.getPointer(6, this));
    }
    disownOnlyLinesUuids(): capnp.Orphan<capnp.List<string>> {
        return __S.disown(this.getOnlyLinesUuids());
    }
    getOnlyLinesUuids(): capnp.List<string> {
        return __S.getList(6, capnp.TextList, this);
    }
    hasOnlyLinesUuids(): boolean {
        return !__S.isNull(__S.getPointer(6, this));
    }
    initOnlyLinesUuids(length: number): capnp.List<string> {
        return __S.initList(6, capnp.TextList, length, this);
    }
    setOnlyLinesUuids(value: capnp.List<string>): void {
        __S.copyFrom(value, __S.getPointer(6, this));
    }
    adoptExceptLinesUuids(value: capnp.Orphan<capnp.List<string>>): void {
        __S.adopt(value, __S.getPointer(7, this));
    }
    disownExceptLinesUuids(): capnp.Orphan<capnp.List<string>> {
        return __S.disown(this.getExceptLinesUuids());
    }
    getExceptLinesUuids(): capnp.List<string> {
        return __S.getList(7, capnp.TextList, this);
    }
    hasExceptLinesUuids(): boolean {
        return !__S.isNull(__S.getPointer(7, this));
    }
    initExceptLinesUuids(length: number): capnp.List<string> {
        return __S.initList(7, capnp.TextList, length, this);
    }
    setExceptLinesUuids(value: capnp.List<string>): void {
        __S.copyFrom(value, __S.getPointer(7, this));
    }
    adoptOnlyAgenciesUuids(value: capnp.Orphan<capnp.List<string>>): void {
        __S.adopt(value, __S.getPointer(8, this));
    }
    disownOnlyAgenciesUuids(): capnp.Orphan<capnp.List<string>> {
        return __S.disown(this.getOnlyAgenciesUuids());
    }
    getOnlyAgenciesUuids(): capnp.List<string> {
        return __S.getList(8, capnp.TextList, this);
    }
    hasOnlyAgenciesUuids(): boolean {
        return !__S.isNull(__S.getPointer(8, this));
    }
    initOnlyAgenciesUuids(length: number): capnp.List<string> {
        return __S.initList(8, capnp.TextList, length, this);
    }
    setOnlyAgenciesUuids(value: capnp.List<string>): void {
        __S.copyFrom(value, __S.getPointer(8, this));
    }
    adoptExceptAgenciesUuids(value: capnp.Orphan<capnp.List<string>>): void {
        __S.adopt(value, __S.getPointer(9, this));
    }
    disownExceptAgenciesUuids(): capnp.Orphan<capnp.List<string>> {
        return __S.disown(this.getExceptAgenciesUuids());
    }
    getExceptAgenciesUuids(): capnp.List<string> {
        return __S.getList(9, capnp.TextList, this);
    }
    hasExceptAgenciesUuids(): boolean {
        return !__S.isNull(__S.getPointer(9, this));
    }
    initExceptAgenciesUuids(length: number): capnp.List<string> {
        return __S.initList(9, capnp.TextList, length, this);
    }
    setExceptAgenciesUuids(value: capnp.List<string>): void {
        __S.copyFrom(value, __S.getPointer(9, this));
    }
    adoptOnlyNodesUuids(value: capnp.Orphan<capnp.List<string>>): void {
        __S.adopt(value, __S.getPointer(10, this));
    }
    disownOnlyNodesUuids(): capnp.Orphan<capnp.List<string>> {
        return __S.disown(this.getOnlyNodesUuids());
    }
    getOnlyNodesUuids(): capnp.List<string> {
        return __S.getList(10, capnp.TextList, this);
    }
    hasOnlyNodesUuids(): boolean {
        return !__S.isNull(__S.getPointer(10, this));
    }
    initOnlyNodesUuids(length: number): capnp.List<string> {
        return __S.initList(10, capnp.TextList, length, this);
    }
    setOnlyNodesUuids(value: capnp.List<string>): void {
        __S.copyFrom(value, __S.getPointer(10, this));
    }
    adoptExceptNodesUuids(value: capnp.Orphan<capnp.List<string>>): void {
        __S.adopt(value, __S.getPointer(11, this));
    }
    disownExceptNodesUuids(): capnp.Orphan<capnp.List<string>> {
        return __S.disown(this.getExceptNodesUuids());
    }
    getExceptNodesUuids(): capnp.List<string> {
        return __S.getList(11, capnp.TextList, this);
    }
    hasExceptNodesUuids(): boolean {
        return !__S.isNull(__S.getPointer(11, this));
    }
    initExceptNodesUuids(length: number): capnp.List<string> {
        return __S.initList(11, capnp.TextList, length, this);
    }
    setExceptNodesUuids(value: capnp.List<string>): void {
        __S.copyFrom(value, __S.getPointer(11, this));
    }
    adoptOnlyModesShortnames(value: capnp.Orphan<capnp.List<string>>): void {
        __S.adopt(value, __S.getPointer(12, this));
    }
    disownOnlyModesShortnames(): capnp.Orphan<capnp.List<string>> {
        return __S.disown(this.getOnlyModesShortnames());
    }
    getOnlyModesShortnames(): capnp.List<string> {
        return __S.getList(12, capnp.TextList, this);
    }
    hasOnlyModesShortnames(): boolean {
        return !__S.isNull(__S.getPointer(12, this));
    }
    initOnlyModesShortnames(length: number): capnp.List<string> {
        return __S.initList(12, capnp.TextList, length, this);
    }
    setOnlyModesShortnames(value: capnp.List<string>): void {
        __S.copyFrom(value, __S.getPointer(12, this));
    }
    adoptExceptModesShortnames(value: capnp.Orphan<capnp.List<string>>): void {
        __S.adopt(value, __S.getPointer(13, this));
    }
    disownExceptModesShortnames(): capnp.Orphan<capnp.List<string>> {
        return __S.disown(this.getExceptModesShortnames());
    }
    getExceptModesShortnames(): capnp.List<string> {
        return __S.getList(13, capnp.TextList, this);
    }
    hasExceptModesShortnames(): boolean {
        return !__S.isNull(__S.getPointer(13, this));
    }
    initExceptModesShortnames(length: number): capnp.List<string> {
        return __S.initList(13, capnp.TextList, length, this);
    }
    setExceptModesShortnames(value: capnp.List<string>): void {
        __S.copyFrom(value, __S.getPointer(13, this));
    }
    getIsFrozen(): number {
        return __S.getInt8(1, this);
    }
    setIsFrozen(value: number): void {
        __S.setInt8(1, value, this);
    }
    getSimulationUuid(): string {
        return __S.getText(14, this);
    }
    setSimulationUuid(value: string): void {
        __S.setText(14, value, this);
    }
    toString(): string {
        return 'Scenario_' + super.toString();
    }
}
export class ScenarioCollection extends __S {
    static readonly _capnp = { displayName: 'ScenarioCollection', id: 'fb484a8cffc82db3', size: new __O(0, 1) };
    static _Scenarios: capnp.ListCtor<Scenario>;
    adoptScenarios(value: capnp.Orphan<capnp.List<Scenario>>): void {
        __S.adopt(value, __S.getPointer(0, this));
    }
    disownScenarios(): capnp.Orphan<capnp.List<Scenario>> {
        return __S.disown(this.getScenarios());
    }
    getScenarios(): capnp.List<Scenario> {
        return __S.getList(0, ScenarioCollection._Scenarios, this);
    }
    hasScenarios(): boolean {
        return !__S.isNull(__S.getPointer(0, this));
    }
    initScenarios(length: number): capnp.List<Scenario> {
        return __S.initList(0, ScenarioCollection._Scenarios, length, this);
    }
    setScenarios(value: capnp.List<Scenario>): void {
        __S.copyFrom(value, __S.getPointer(0, this));
    }
    toString(): string {
        return 'ScenarioCollection_' + super.toString();
    }
}
ScenarioCollection._Scenarios = capnp.CompositeList(Scenario);
