/* tslint:disable */

/**
 * This file has been automatically generated by the [capnpc-ts utility](https://github.com/jdiaz5513/capnp-ts).
 */

import * as capnp from 'capnp-ts';
import { ObjectSize as __O, Struct as __S } from 'capnp-ts';
export const _capnpFileId = 'e4c1200b2bf55c52';
export class Garage extends __S {
    static readonly _capnp = { displayName: 'Garage', id: 'c06eec7b96b24ad1', size: new __O(8, 8) };
    getUuid(): string {
        return __S.getText(0, this);
    }
    setUuid(value: string): void {
        __S.setText(0, value, this);
    }
    getId(): number {
        return __S.getInt32(0, this);
    }
    setId(value: number): void {
        __S.setInt32(0, value, this);
    }
    getInternalId(): string {
        return __S.getText(1, this);
    }
    setInternalId(value: string): void {
        __S.setText(1, value, this);
    }
    getAgencyUuid(): string {
        return __S.getText(2, this);
    }
    setAgencyUuid(value: string): void {
        __S.setText(2, value, this);
    }
    getName(): string {
        return __S.getText(3, this);
    }
    setName(value: string): void {
        __S.setText(3, value, this);
    }
    getColor(): string {
        return __S.getText(4, this);
    }
    setColor(value: string): void {
        __S.setText(4, value, this);
    }
    adoptGeography(value: capnp.Orphan<capnp.Data>): void {
        __S.adopt(value, __S.getPointer(5, this));
    }
    disownGeography(): capnp.Orphan<capnp.Data> {
        return __S.disown(this.getGeography());
    }
    getGeography(): capnp.Data {
        return __S.getData(5, this);
    }
    hasGeography(): boolean {
        return !__S.isNull(__S.getPointer(5, this));
    }
    initGeography(length: number): capnp.Data {
        return __S.initData(5, length, this);
    }
    setGeography(value: capnp.Data): void {
        __S.copyFrom(value, __S.getPointer(5, this));
    }
    getIsEnabled(): number {
        return __S.getInt8(4, this);
    }
    setIsEnabled(value: number): void {
        __S.setInt8(4, value, this);
    }
    getDescription(): string {
        return __S.getText(6, this);
    }
    setDescription(value: string): void {
        __S.setText(6, value, this);
    }
    getData(): string {
        return __S.getText(7, this);
    }
    setData(value: string): void {
        __S.setText(7, value, this);
    }
    getIsFrozen(): number {
        return __S.getInt8(5, this);
    }
    setIsFrozen(value: number): void {
        __S.setInt8(5, value, this);
    }
    toString(): string {
        return 'Garage_' + super.toString();
    }
}
export class GarageCollection extends __S {
    static readonly _capnp = { displayName: 'GarageCollection', id: '9f69d60c92b8e3f6', size: new __O(0, 1) };
    static _Garages: capnp.ListCtor<Garage>;
    adoptGarages(value: capnp.Orphan<capnp.List<Garage>>): void {
        __S.adopt(value, __S.getPointer(0, this));
    }
    disownGarages(): capnp.Orphan<capnp.List<Garage>> {
        return __S.disown(this.getGarages());
    }
    getGarages(): capnp.List<Garage> {
        return __S.getList(0, GarageCollection._Garages, this);
    }
    hasGarages(): boolean {
        return !__S.isNull(__S.getPointer(0, this));
    }
    initGarages(length: number): capnp.List<Garage> {
        return __S.initList(0, GarageCollection._Garages, length, this);
    }
    setGarages(value: capnp.List<Garage>): void {
        __S.copyFrom(value, __S.getPointer(0, this));
    }
    toString(): string {
        return 'GarageCollection_' + super.toString();
    }
}
GarageCollection._Garages = capnp.CompositeList(Garage);
