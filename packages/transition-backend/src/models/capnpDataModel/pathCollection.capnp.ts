/* tslint:disable */

/**
 * This file has been automatically generated by the [capnpc-ts utility](https://github.com/jdiaz5513/capnp-ts).
 */

import * as capnp from 'capnp-ts';
import { ObjectSize as __O, Struct as __S } from 'capnp-ts';
export const _capnpFileId = 'f4952682718a13e5';
export class Path extends __S {
    static readonly _capnp = { displayName: 'Path', id: 'ddce17c4e19d4594', size: new __O(8, 11) };
    getUuid(): string {
        return __S.getText(0, this);
    }
    setUuid(value: string): void {
        __S.setText(0, value, this);
    }
    getId(): number {
        return __S.getInt32(0, this);
    }
    setId(value: number): void {
        __S.setInt32(0, value, this);
    }
    getInternalId(): string {
        return __S.getText(1, this);
    }
    setInternalId(value: string): void {
        __S.setText(1, value, this);
    }
    getDirection(): string {
        return __S.getText(2, this);
    }
    setDirection(value: string): void {
        __S.setText(2, value, this);
    }
    getLineUuid(): string {
        return __S.getText(3, this);
    }
    setLineUuid(value: string): void {
        __S.setText(3, value, this);
    }
    getName(): string {
        return __S.getText(4, this);
    }
    setName(value: string): void {
        __S.setText(4, value, this);
    }
    getIsEnabled(): number {
        return __S.getInt8(4, this);
    }
    setIsEnabled(value: number): void {
        __S.setInt8(4, value, this);
    }
    getDescription(): string {
        return __S.getText(5, this);
    }
    setDescription(value: string): void {
        __S.setText(5, value, this);
    }
    getData(): string {
        return __S.getText(6, this);
    }
    setData(value: string): void {
        __S.setText(6, value, this);
    }
    adoptNodesUuids(value: capnp.Orphan<capnp.List<string>>): void {
        __S.adopt(value, __S.getPointer(7, this));
    }
    disownNodesUuids(): capnp.Orphan<capnp.List<string>> {
        return __S.disown(this.getNodesUuids());
    }
    getNodesUuids(): capnp.List<string> {
        return __S.getList(7, capnp.TextList, this);
    }
    hasNodesUuids(): boolean {
        return !__S.isNull(__S.getPointer(7, this));
    }
    initNodesUuids(length: number): capnp.List<string> {
        return __S.initList(7, capnp.TextList, length, this);
    }
    setNodesUuids(value: capnp.List<string>): void {
        __S.copyFrom(value, __S.getPointer(7, this));
    }
    adoptStopsUuids(value: capnp.Orphan<capnp.List<string>>): void {
        __S.adopt(value, __S.getPointer(8, this));
    }
    disownStopsUuids(): capnp.Orphan<capnp.List<string>> {
        return __S.disown(this.getStopsUuids());
    }
    getStopsUuids(): capnp.List<string> {
        return __S.getList(8, capnp.TextList, this);
    }
    hasStopsUuids(): boolean {
        return !__S.isNull(__S.getPointer(8, this));
    }
    initStopsUuids(length: number): capnp.List<string> {
        return __S.initList(8, capnp.TextList, length, this);
    }
    setStopsUuids(value: capnp.List<string>): void {
        __S.copyFrom(value, __S.getPointer(8, this));
    }
    adoptSegments(value: capnp.Orphan<capnp.List<number>>): void {
        __S.adopt(value, __S.getPointer(9, this));
    }
    disownSegments(): capnp.Orphan<capnp.List<number>> {
        return __S.disown(this.getSegments());
    }
    getSegments(): capnp.List<number> {
        return __S.getList(9, capnp.Int32List, this);
    }
    hasSegments(): boolean {
        return !__S.isNull(__S.getPointer(9, this));
    }
    initSegments(length: number): capnp.List<number> {
        return __S.initList(9, capnp.Int32List, length, this);
    }
    setSegments(value: capnp.List<number>): void {
        __S.copyFrom(value, __S.getPointer(9, this));
    }
    adoptGeography(value: capnp.Orphan<capnp.Data>): void {
        __S.adopt(value, __S.getPointer(10, this));
    }
    disownGeography(): capnp.Orphan<capnp.Data> {
        return __S.disown(this.getGeography());
    }
    getGeography(): capnp.Data {
        return __S.getData(10, this);
    }
    hasGeography(): boolean {
        return !__S.isNull(__S.getPointer(10, this));
    }
    initGeography(length: number): capnp.Data {
        return __S.initData(10, length, this);
    }
    setGeography(value: capnp.Data): void {
        __S.copyFrom(value, __S.getPointer(10, this));
    }
    getIsFrozen(): number {
        return __S.getInt8(5, this);
    }
    setIsFrozen(value: number): void {
        __S.setInt8(5, value, this);
    }
    toString(): string {
        return 'Path_' + super.toString();
    }
}
export class PathCollection extends __S {
    static readonly _capnp = { displayName: 'PathCollection', id: 'b62080e16309c958', size: new __O(0, 1) };
    static _Paths: capnp.ListCtor<Path>;
    adoptPaths(value: capnp.Orphan<capnp.List<Path>>): void {
        __S.adopt(value, __S.getPointer(0, this));
    }
    disownPaths(): capnp.Orphan<capnp.List<Path>> {
        return __S.disown(this.getPaths());
    }
    getPaths(): capnp.List<Path> {
        return __S.getList(0, PathCollection._Paths, this);
    }
    hasPaths(): boolean {
        return !__S.isNull(__S.getPointer(0, this));
    }
    initPaths(length: number): capnp.List<Path> {
        return __S.initList(0, PathCollection._Paths, length, this);
    }
    setPaths(value: capnp.List<Path>): void {
        __S.copyFrom(value, __S.getPointer(0, this));
    }
    toString(): string {
        return 'PathCollection_' + super.toString();
    }
}
PathCollection._Paths = capnp.CompositeList(Path);
