/* tslint:disable */

/**
 * This file has been automatically generated by the [capnpc-ts utility](https://github.com/jdiaz5513/capnp-ts).
 */

import * as capnp from 'capnp-ts';
import { ObjectSize as __O, Struct as __S } from 'capnp-ts';
export const _capnpFileId = 'd46f5ecd107c0374';
export class Place extends __S {
    static readonly _capnp = { displayName: 'Place', id: 'dce3876c3329abbe', size: new __O(16, 10) };
    getUuid(): string {
        return __S.getText(0, this);
    }
    setUuid(value: string): void {
        __S.setText(0, value, this);
    }
    getDataSourceUuid(): string {
        return __S.getText(1, this);
    }
    setDataSourceUuid(value: string): void {
        __S.setText(1, value, this);
    }
    getId(): number {
        return __S.getUint32(0, this);
    }
    setId(value: number): void {
        __S.setUint32(0, value, this);
    }
    getShortname(): string {
        return __S.getText(2, this);
    }
    setShortname(value: string): void {
        __S.setText(2, value, this);
    }
    getName(): string {
        return __S.getText(3, this);
    }
    setName(value: string): void {
        __S.setText(3, value, this);
    }
    getDescription(): string {
        return __S.getText(4, this);
    }
    setDescription(value: string): void {
        __S.setText(4, value, this);
    }
    getLatitude(): number {
        return __S.getInt32(4, this);
    }
    setLatitude(value: number): void {
        __S.setInt32(4, value, this);
    }
    getLongitude(): number {
        return __S.getInt32(8, this);
    }
    setLongitude(value: number): void {
        __S.setInt32(8, value, this);
    }
    adoptNodesUuids(value: capnp.Orphan<capnp.List<string>>): void {
        __S.adopt(value, __S.getPointer(5, this));
    }
    disownNodesUuids(): capnp.Orphan<capnp.List<string>> {
        return __S.disown(this.getNodesUuids());
    }
    getNodesUuids(): capnp.List<string> {
        return __S.getList(5, capnp.TextList, this);
    }
    hasNodesUuids(): boolean {
        return !__S.isNull(__S.getPointer(5, this));
    }
    initNodesUuids(length: number): capnp.List<string> {
        return __S.initList(5, capnp.TextList, length, this);
    }
    setNodesUuids(value: capnp.List<string>): void {
        __S.copyFrom(value, __S.getPointer(5, this));
    }
    adoptNodesTravelTimes(value: capnp.Orphan<capnp.List<number>>): void {
        __S.adopt(value, __S.getPointer(6, this));
    }
    disownNodesTravelTimes(): capnp.Orphan<capnp.List<number>> {
        return __S.disown(this.getNodesTravelTimes());
    }
    getNodesTravelTimes(): capnp.List<number> {
        return __S.getList(6, capnp.Int16List, this);
    }
    hasNodesTravelTimes(): boolean {
        return !__S.isNull(__S.getPointer(6, this));
    }
    initNodesTravelTimes(length: number): capnp.List<number> {
        return __S.initList(6, capnp.Int16List, length, this);
    }
    setNodesTravelTimes(value: capnp.List<number>): void {
        __S.copyFrom(value, __S.getPointer(6, this));
    }
    adoptNodesDistances(value: capnp.Orphan<capnp.List<number>>): void {
        __S.adopt(value, __S.getPointer(7, this));
    }
    disownNodesDistances(): capnp.Orphan<capnp.List<number>> {
        return __S.disown(this.getNodesDistances());
    }
    getNodesDistances(): capnp.List<number> {
        return __S.getList(7, capnp.Int16List, this);
    }
    hasNodesDistances(): boolean {
        return !__S.isNull(__S.getPointer(7, this));
    }
    initNodesDistances(length: number): capnp.List<number> {
        return __S.initList(7, capnp.Int16List, length, this);
    }
    setNodesDistances(value: capnp.List<number>): void {
        __S.copyFrom(value, __S.getPointer(7, this));
    }
    getInternalId(): string {
        return __S.getText(8, this);
    }
    setInternalId(value: string): void {
        __S.setText(8, value, this);
    }
    getData(): string {
        return __S.getText(9, this);
    }
    setData(value: string): void {
        __S.setText(9, value, this);
    }
    getIsFrozen(): number {
        return __S.getInt8(12, this);
    }
    setIsFrozen(value: number): void {
        __S.setInt8(12, value, this);
    }
    toString(): string {
        return 'Place_' + super.toString();
    }
}
