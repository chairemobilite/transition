// @generated by the capnpc-rust plugin to the Cap'n Proto schema compiler.
// DO NOT EDIT.
// source: octavi/taxiPoint.capnp


pub mod taxi_point {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl <'a> ::capnp::traits::Owned<'a> for Owned { type Reader = Reader<'a>; type Builder = Builder<'a>; }
  impl <'a> ::capnp::traits::OwnedStruct<'a> for Owned { type Reader = Reader<'a>; type Builder = Builder<'a>; }
  impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

  #[derive(Clone, Copy)]
  pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }

  impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
    #[inline]
    fn type_id() -> u64 { _private::TYPE_ID }
  }
  impl <'a,> ::capnp::traits::FromStructReader<'a> for Reader<'a,>  {
    fn new(reader: ::capnp::private::layout::StructReader<'a>) -> Reader<'a,> {
      Reader { reader,  }
    }
  }

  impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [capnp::Word]>) -> ::capnp::Result<Reader<'a,>> {
      ::core::result::Result::Ok(::capnp::traits::FromStructReader::new(reader.get_struct(default)?))
    }
  }

  impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,> Reader<'a,>  {
    pub fn reborrow(&self) -> Reader<'_,> {
      Reader { .. *self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_taxi_id(self) -> u32 {
      self.reader.get_data_field::<u32>(0)
    }
    #[inline]
    pub fn get_operator_id(self) -> u16 {
      self.reader.get_data_field::<u16>(2)
    }
    #[inline]
    pub fn get_timestamp(self) -> u32 {
      self.reader.get_data_field::<u32>(2)
    }
    #[inline]
    pub fn get_status(self) -> ::core::result::Result<crate::taxiPoint_capnp::taxi_point::Status,::capnp::NotInSchema> {
      ::capnp::traits::FromU16::from_u16(self.reader.get_data_field::<u16>(3))
    }
    #[inline]
    pub fn get_latitude(self) -> i32 {
      self.reader.get_data_field::<i32>(3)
    }
    #[inline]
    pub fn get_longitude(self) -> i32 {
      self.reader.get_data_field::<i32>(4)
    }
    #[inline]
    pub fn get_speed(self) -> i16 {
      self.reader.get_data_field::<i16>(10)
    }
    #[inline]
    pub fn get_azimuth(self) -> i16 {
      self.reader.get_data_field::<i16>(11)
    }
    #[inline]
    pub fn get_device(self) -> ::core::result::Result<crate::taxiPoint_capnp::taxi_point::Device,::capnp::NotInSchema> {
      ::capnp::traits::FromU16::from_u16(self.reader.get_data_field::<u16>(12))
    }
  }

  pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
  impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
    #[inline]
    fn struct_size() -> ::capnp::private::layout::StructSize { _private::STRUCT_SIZE }
  }
  impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
    #[inline]
    fn type_id() -> u64 { _private::TYPE_ID }
  }
  impl <'a,> ::capnp::traits::FromStructBuilder<'a> for Builder<'a,>  {
    fn new(builder: ::capnp::private::layout::StructBuilder<'a>) -> Builder<'a, > {
      Builder { builder,  }
    }
  }

  impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Builder<'a,> {
      ::capnp::traits::FromStructBuilder::new(builder.init_struct(_private::STRUCT_SIZE))
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [capnp::Word]>) -> ::capnp::Result<Builder<'a,>> {
      ::core::result::Result::Ok(::capnp::traits::FromStructBuilder::new(builder.get_struct(_private::STRUCT_SIZE, default)?))
    }
  }

  impl <'a,> ::capnp::traits::SetPointerBuilder for Reader<'a,>  {
    fn set_pointer_builder<'b>(pointer: ::capnp::private::layout::PointerBuilder<'b>, value: Reader<'a,>, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,> Builder<'a,>  {
    pub fn into_reader(self) -> Reader<'a,> {
      ::capnp::traits::FromStructReader::new(self.builder.into_reader())
    }
    pub fn reborrow(&mut self) -> Builder<'_,> {
      Builder { .. *self }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,> {
      ::capnp::traits::FromStructReader::new(self.builder.into_reader())
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.into_reader().total_size()
    }
    #[inline]
    pub fn get_taxi_id(self) -> u32 {
      self.builder.get_data_field::<u32>(0)
    }
    #[inline]
    pub fn set_taxi_id(&mut self, value: u32)  {
      self.builder.set_data_field::<u32>(0, value);
    }
    #[inline]
    pub fn get_operator_id(self) -> u16 {
      self.builder.get_data_field::<u16>(2)
    }
    #[inline]
    pub fn set_operator_id(&mut self, value: u16)  {
      self.builder.set_data_field::<u16>(2, value);
    }
    #[inline]
    pub fn get_timestamp(self) -> u32 {
      self.builder.get_data_field::<u32>(2)
    }
    #[inline]
    pub fn set_timestamp(&mut self, value: u32)  {
      self.builder.set_data_field::<u32>(2, value);
    }
    #[inline]
    pub fn get_status(self) -> ::core::result::Result<crate::taxiPoint_capnp::taxi_point::Status,::capnp::NotInSchema> {
      ::capnp::traits::FromU16::from_u16(self.builder.get_data_field::<u16>(3))
    }
    #[inline]
    pub fn set_status(&mut self, value: crate::taxiPoint_capnp::taxi_point::Status)  {
      self.builder.set_data_field::<u16>(3, value as u16)
    }
    #[inline]
    pub fn get_latitude(self) -> i32 {
      self.builder.get_data_field::<i32>(3)
    }
    #[inline]
    pub fn set_latitude(&mut self, value: i32)  {
      self.builder.set_data_field::<i32>(3, value);
    }
    #[inline]
    pub fn get_longitude(self) -> i32 {
      self.builder.get_data_field::<i32>(4)
    }
    #[inline]
    pub fn set_longitude(&mut self, value: i32)  {
      self.builder.set_data_field::<i32>(4, value);
    }
    #[inline]
    pub fn get_speed(self) -> i16 {
      self.builder.get_data_field::<i16>(10)
    }
    #[inline]
    pub fn set_speed(&mut self, value: i16)  {
      self.builder.set_data_field::<i16>(10, value);
    }
    #[inline]
    pub fn get_azimuth(self) -> i16 {
      self.builder.get_data_field::<i16>(11)
    }
    #[inline]
    pub fn set_azimuth(&mut self, value: i16)  {
      self.builder.set_data_field::<i16>(11, value);
    }
    #[inline]
    pub fn get_device(self) -> ::core::result::Result<crate::taxiPoint_capnp::taxi_point::Device,::capnp::NotInSchema> {
      ::capnp::traits::FromU16::from_u16(self.builder.get_data_field::<u16>(12))
    }
    #[inline]
    pub fn set_device(&mut self, value: crate::taxiPoint_capnp::taxi_point::Device)  {
      self.builder.set_data_field::<u16>(12, value as u16)
    }
  }

  pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Pipeline {
      Pipeline { _typeless: typeless,  }
    }
  }
  impl Pipeline  {
  }
  mod _private {
    use capnp::private::layout;
    pub const STRUCT_SIZE: layout::StructSize = layout::StructSize { data: 4, pointers: 0 };
    pub const TYPE_ID: u64 = 0xbac8_2edb_9cfb_2f2b;
  }

  #[repr(u16)]
  #[derive(Clone, Copy, PartialEq)]
  pub enum Status {
    None = 0,
    Free = 1,
    Occupied = 2,
    Unavailable = 3,
    Oncoming = 4,
    Answering = 5,
    Off = 6,
    Other = 7,
    Unknown = 8,
  }
  impl ::capnp::traits::FromU16 for Status {
    #[inline]
    fn from_u16(value: u16) -> ::core::result::Result<Status, ::capnp::NotInSchema> {
      match value {
        0 => ::core::result::Result::Ok(Status::None),
        1 => ::core::result::Result::Ok(Status::Free),
        2 => ::core::result::Result::Ok(Status::Occupied),
        3 => ::core::result::Result::Ok(Status::Unavailable),
        4 => ::core::result::Result::Ok(Status::Oncoming),
        5 => ::core::result::Result::Ok(Status::Answering),
        6 => ::core::result::Result::Ok(Status::Off),
        7 => ::core::result::Result::Ok(Status::Other),
        8 => ::core::result::Result::Ok(Status::Unknown),
        n => ::core::result::Result::Err(::capnp::NotInSchema(n)),
      }
    }
  }
  impl ::capnp::traits::ToU16 for Status {
    #[inline]
    fn to_u16(self) -> u16 { self as u16 }
  }
  impl ::capnp::traits::HasTypeId for Status {
    #[inline]
    fn type_id() -> u64 { 0xdfcd_d802_2870_ed2au64 }
  }

  #[repr(u16)]
  #[derive(Clone, Copy, PartialEq)]
  pub enum Device {
    None = 0,
    Phone = 1,
    Tablet = 2,
    Taximeter = 3,
    Otherdevice = 4,
    Other = 5,
    Unknown = 6,
  }
  impl ::capnp::traits::FromU16 for Device {
    #[inline]
    fn from_u16(value: u16) -> ::core::result::Result<Device, ::capnp::NotInSchema> {
      match value {
        0 => ::core::result::Result::Ok(Device::None),
        1 => ::core::result::Result::Ok(Device::Phone),
        2 => ::core::result::Result::Ok(Device::Tablet),
        3 => ::core::result::Result::Ok(Device::Taximeter),
        4 => ::core::result::Result::Ok(Device::Otherdevice),
        5 => ::core::result::Result::Ok(Device::Other),
        6 => ::core::result::Result::Ok(Device::Unknown),
        n => ::core::result::Result::Err(::capnp::NotInSchema(n)),
      }
    }
  }
  impl ::capnp::traits::ToU16 for Device {
    #[inline]
    fn to_u16(self) -> u16 { self as u16 }
  }
  impl ::capnp::traits::HasTypeId for Device {
    #[inline]
    fn type_id() -> u64 { 0xb887_775e_896c_c6b4u64 }
  }
}
