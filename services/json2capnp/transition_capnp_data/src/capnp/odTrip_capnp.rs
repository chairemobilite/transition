// @generated by the capnpc-rust plugin to the Cap'n Proto schema compiler.
// DO NOT EDIT.
// source: odTrip.capnp


pub mod od_trip {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl <'a> ::capnp::traits::Owned<'a> for Owned { type Reader = Reader<'a>; type Builder = Builder<'a>; }
  impl <'a> ::capnp::traits::OwnedStruct<'a> for Owned { type Reader = Reader<'a>; type Builder = Builder<'a>; }
  impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

  #[derive(Clone, Copy)]
  pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }

  impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
    #[inline]
    fn type_id() -> u64 { _private::TYPE_ID }
  }
  impl <'a,> ::capnp::traits::FromStructReader<'a> for Reader<'a,>  {
    fn new(reader: ::capnp::private::layout::StructReader<'a>) -> Reader<'a,> {
      Reader { reader,  }
    }
  }

  impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [capnp::Word]>) -> ::capnp::Result<Reader<'a,>> {
      ::core::result::Result::Ok(::capnp::traits::FromStructReader::new(reader.get_struct(default)?))
    }
  }

  impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,> Reader<'a,>  {
    pub fn reborrow(&self) -> Reader<'_,> {
      Reader { .. *self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_uuid(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
    }
    pub fn has_uuid(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_person_uuid(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(1), ::core::option::Option::None)
    }
    pub fn has_person_uuid(&self) -> bool {
      !self.reader.get_pointer_field(1).is_null()
    }
    #[inline]
    pub fn get_household_uuid(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(2), ::core::option::Option::None)
    }
    pub fn has_household_uuid(&self) -> bool {
      !self.reader.get_pointer_field(2).is_null()
    }
    #[inline]
    pub fn get_data_source_uuid(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(3), ::core::option::Option::None)
    }
    pub fn has_data_source_uuid(&self) -> bool {
      !self.reader.get_pointer_field(3).is_null()
    }
    #[inline]
    pub fn get_id(self) -> u32 {
      self.reader.get_data_field::<u32>(0)
    }
    #[inline]
    pub fn get_expansion_factor(self) -> f32 {
      self.reader.get_data_field::<f32>(1)
    }
    #[inline]
    pub fn get_departure_time_seconds(self) -> i32 {
      self.reader.get_data_field::<i32>(2)
    }
    #[inline]
    pub fn get_arrival_time_seconds(self) -> i32 {
      self.reader.get_data_field::<i32>(3)
    }
    #[inline]
    pub fn get_walking_travel_time_seconds(self) -> i32 {
      self.reader.get_data_field::<i32>(4)
    }
    #[inline]
    pub fn get_cycling_travel_time_seconds(self) -> i32 {
      self.reader.get_data_field::<i32>(5)
    }
    #[inline]
    pub fn get_driving_travel_time_seconds(self) -> i32 {
      self.reader.get_data_field::<i32>(6)
    }
    #[inline]
    pub fn get_mode(self) -> ::core::result::Result<crate::odTrip_capnp::od_trip::Mode,::capnp::NotInSchema> {
      ::capnp::traits::FromU16::from_u16(self.reader.get_data_field::<u16>(14))
    }
    #[inline]
    pub fn get_origin_activity(self) -> ::core::result::Result<crate::odTrip_capnp::od_trip::Activity,::capnp::NotInSchema> {
      ::capnp::traits::FromU16::from_u16(self.reader.get_data_field::<u16>(15))
    }
    #[inline]
    pub fn get_destination_activity(self) -> ::core::result::Result<crate::odTrip_capnp::od_trip::Activity,::capnp::NotInSchema> {
      ::capnp::traits::FromU16::from_u16(self.reader.get_data_field::<u16>(16))
    }
    #[inline]
    pub fn get_origin_latitude(self) -> i32 {
      self.reader.get_data_field::<i32>(9)
    }
    #[inline]
    pub fn get_origin_longitude(self) -> i32 {
      self.reader.get_data_field::<i32>(10)
    }
    #[inline]
    pub fn get_destination_latitude(self) -> i32 {
      self.reader.get_data_field::<i32>(11)
    }
    #[inline]
    pub fn get_destination_longitude(self) -> i32 {
      self.reader.get_data_field::<i32>(12)
    }
    #[inline]
    pub fn get_origin_nodes_uuids(self) -> ::capnp::Result<::capnp::text_list::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(4), ::core::option::Option::None)
    }
    pub fn has_origin_nodes_uuids(&self) -> bool {
      !self.reader.get_pointer_field(4).is_null()
    }
    #[inline]
    pub fn get_origin_nodes_travel_times(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,i16>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(5), ::core::option::Option::None)
    }
    pub fn has_origin_nodes_travel_times(&self) -> bool {
      !self.reader.get_pointer_field(5).is_null()
    }
    #[inline]
    pub fn get_origin_nodes_distances(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,i16>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(6), ::core::option::Option::None)
    }
    pub fn has_origin_nodes_distances(&self) -> bool {
      !self.reader.get_pointer_field(6).is_null()
    }
    #[inline]
    pub fn get_destination_nodes_uuids(self) -> ::capnp::Result<::capnp::text_list::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(7), ::core::option::Option::None)
    }
    pub fn has_destination_nodes_uuids(&self) -> bool {
      !self.reader.get_pointer_field(7).is_null()
    }
    #[inline]
    pub fn get_destination_nodes_travel_times(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,i16>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(8), ::core::option::Option::None)
    }
    pub fn has_destination_nodes_travel_times(&self) -> bool {
      !self.reader.get_pointer_field(8).is_null()
    }
    #[inline]
    pub fn get_destination_nodes_distances(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,i16>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(9), ::core::option::Option::None)
    }
    pub fn has_destination_nodes_distances(&self) -> bool {
      !self.reader.get_pointer_field(9).is_null()
    }
    #[inline]
    pub fn get_internal_id(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(10), ::core::option::Option::None)
    }
    pub fn has_internal_id(&self) -> bool {
      !self.reader.get_pointer_field(10).is_null()
    }
    #[inline]
    pub fn get_data(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(11), ::core::option::Option::None)
    }
    pub fn has_data(&self) -> bool {
      !self.reader.get_pointer_field(11).is_null()
    }
    #[inline]
    pub fn get_is_frozen(self) -> i8 {
      self.reader.get_data_field::<i8>(34)
    }
  }

  pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
  impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
    #[inline]
    fn struct_size() -> ::capnp::private::layout::StructSize { _private::STRUCT_SIZE }
  }
  impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
    #[inline]
    fn type_id() -> u64 { _private::TYPE_ID }
  }
  impl <'a,> ::capnp::traits::FromStructBuilder<'a> for Builder<'a,>  {
    fn new(builder: ::capnp::private::layout::StructBuilder<'a>) -> Builder<'a, > {
      Builder { builder,  }
    }
  }

  impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Builder<'a,> {
      ::capnp::traits::FromStructBuilder::new(builder.init_struct(_private::STRUCT_SIZE))
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [capnp::Word]>) -> ::capnp::Result<Builder<'a,>> {
      ::core::result::Result::Ok(::capnp::traits::FromStructBuilder::new(builder.get_struct(_private::STRUCT_SIZE, default)?))
    }
  }

  impl <'a,> ::capnp::traits::SetPointerBuilder for Reader<'a,>  {
    fn set_pointer_builder<'b>(pointer: ::capnp::private::layout::PointerBuilder<'b>, value: Reader<'a,>, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,> Builder<'a,>  {
    pub fn into_reader(self) -> Reader<'a,> {
      ::capnp::traits::FromStructReader::new(self.builder.into_reader())
    }
    pub fn reborrow(&mut self) -> Builder<'_,> {
      Builder { .. *self }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,> {
      ::capnp::traits::FromStructReader::new(self.builder.into_reader())
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.into_reader().total_size()
    }
    #[inline]
    pub fn get_uuid(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_uuid(&mut self, value: ::capnp::text::Reader<'_>)  {
      self.builder.get_pointer_field(0).set_text(value);
    }
    #[inline]
    pub fn init_uuid(self, size: u32) -> ::capnp::text::Builder<'a> {
      self.builder.get_pointer_field(0).init_text(size)
    }
    pub fn has_uuid(&self) -> bool {
      !self.builder.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_person_uuid(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(1), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_person_uuid(&mut self, value: ::capnp::text::Reader<'_>)  {
      self.builder.get_pointer_field(1).set_text(value);
    }
    #[inline]
    pub fn init_person_uuid(self, size: u32) -> ::capnp::text::Builder<'a> {
      self.builder.get_pointer_field(1).init_text(size)
    }
    pub fn has_person_uuid(&self) -> bool {
      !self.builder.get_pointer_field(1).is_null()
    }
    #[inline]
    pub fn get_household_uuid(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(2), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_household_uuid(&mut self, value: ::capnp::text::Reader<'_>)  {
      self.builder.get_pointer_field(2).set_text(value);
    }
    #[inline]
    pub fn init_household_uuid(self, size: u32) -> ::capnp::text::Builder<'a> {
      self.builder.get_pointer_field(2).init_text(size)
    }
    pub fn has_household_uuid(&self) -> bool {
      !self.builder.get_pointer_field(2).is_null()
    }
    #[inline]
    pub fn get_data_source_uuid(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(3), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_data_source_uuid(&mut self, value: ::capnp::text::Reader<'_>)  {
      self.builder.get_pointer_field(3).set_text(value);
    }
    #[inline]
    pub fn init_data_source_uuid(self, size: u32) -> ::capnp::text::Builder<'a> {
      self.builder.get_pointer_field(3).init_text(size)
    }
    pub fn has_data_source_uuid(&self) -> bool {
      !self.builder.get_pointer_field(3).is_null()
    }
    #[inline]
    pub fn get_id(self) -> u32 {
      self.builder.get_data_field::<u32>(0)
    }
    #[inline]
    pub fn set_id(&mut self, value: u32)  {
      self.builder.set_data_field::<u32>(0, value);
    }
    #[inline]
    pub fn get_expansion_factor(self) -> f32 {
      self.builder.get_data_field::<f32>(1)
    }
    #[inline]
    pub fn set_expansion_factor(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(1, value);
    }
    #[inline]
    pub fn get_departure_time_seconds(self) -> i32 {
      self.builder.get_data_field::<i32>(2)
    }
    #[inline]
    pub fn set_departure_time_seconds(&mut self, value: i32)  {
      self.builder.set_data_field::<i32>(2, value);
    }
    #[inline]
    pub fn get_arrival_time_seconds(self) -> i32 {
      self.builder.get_data_field::<i32>(3)
    }
    #[inline]
    pub fn set_arrival_time_seconds(&mut self, value: i32)  {
      self.builder.set_data_field::<i32>(3, value);
    }
    #[inline]
    pub fn get_walking_travel_time_seconds(self) -> i32 {
      self.builder.get_data_field::<i32>(4)
    }
    #[inline]
    pub fn set_walking_travel_time_seconds(&mut self, value: i32)  {
      self.builder.set_data_field::<i32>(4, value);
    }
    #[inline]
    pub fn get_cycling_travel_time_seconds(self) -> i32 {
      self.builder.get_data_field::<i32>(5)
    }
    #[inline]
    pub fn set_cycling_travel_time_seconds(&mut self, value: i32)  {
      self.builder.set_data_field::<i32>(5, value);
    }
    #[inline]
    pub fn get_driving_travel_time_seconds(self) -> i32 {
      self.builder.get_data_field::<i32>(6)
    }
    #[inline]
    pub fn set_driving_travel_time_seconds(&mut self, value: i32)  {
      self.builder.set_data_field::<i32>(6, value);
    }
    #[inline]
    pub fn get_mode(self) -> ::core::result::Result<crate::odTrip_capnp::od_trip::Mode,::capnp::NotInSchema> {
      ::capnp::traits::FromU16::from_u16(self.builder.get_data_field::<u16>(14))
    }
    #[inline]
    pub fn set_mode(&mut self, value: crate::odTrip_capnp::od_trip::Mode)  {
      self.builder.set_data_field::<u16>(14, value as u16)
    }
    #[inline]
    pub fn get_origin_activity(self) -> ::core::result::Result<crate::odTrip_capnp::od_trip::Activity,::capnp::NotInSchema> {
      ::capnp::traits::FromU16::from_u16(self.builder.get_data_field::<u16>(15))
    }
    #[inline]
    pub fn set_origin_activity(&mut self, value: crate::odTrip_capnp::od_trip::Activity)  {
      self.builder.set_data_field::<u16>(15, value as u16)
    }
    #[inline]
    pub fn get_destination_activity(self) -> ::core::result::Result<crate::odTrip_capnp::od_trip::Activity,::capnp::NotInSchema> {
      ::capnp::traits::FromU16::from_u16(self.builder.get_data_field::<u16>(16))
    }
    #[inline]
    pub fn set_destination_activity(&mut self, value: crate::odTrip_capnp::od_trip::Activity)  {
      self.builder.set_data_field::<u16>(16, value as u16)
    }
    #[inline]
    pub fn get_origin_latitude(self) -> i32 {
      self.builder.get_data_field::<i32>(9)
    }
    #[inline]
    pub fn set_origin_latitude(&mut self, value: i32)  {
      self.builder.set_data_field::<i32>(9, value);
    }
    #[inline]
    pub fn get_origin_longitude(self) -> i32 {
      self.builder.get_data_field::<i32>(10)
    }
    #[inline]
    pub fn set_origin_longitude(&mut self, value: i32)  {
      self.builder.set_data_field::<i32>(10, value);
    }
    #[inline]
    pub fn get_destination_latitude(self) -> i32 {
      self.builder.get_data_field::<i32>(11)
    }
    #[inline]
    pub fn set_destination_latitude(&mut self, value: i32)  {
      self.builder.set_data_field::<i32>(11, value);
    }
    #[inline]
    pub fn get_destination_longitude(self) -> i32 {
      self.builder.get_data_field::<i32>(12)
    }
    #[inline]
    pub fn set_destination_longitude(&mut self, value: i32)  {
      self.builder.set_data_field::<i32>(12, value);
    }
    #[inline]
    pub fn get_origin_nodes_uuids(self) -> ::capnp::Result<::capnp::text_list::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(4), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_origin_nodes_uuids(&mut self, value: ::capnp::text_list::Reader<'a>) -> ::capnp::Result<()> {
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(4), value, false)
    }
    #[inline]
    pub fn init_origin_nodes_uuids(self, size: u32) -> ::capnp::text_list::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(4), size)
    }
    pub fn has_origin_nodes_uuids(&self) -> bool {
      !self.builder.get_pointer_field(4).is_null()
    }
    #[inline]
    pub fn get_origin_nodes_travel_times(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,i16>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(5), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_origin_nodes_travel_times(&mut self, value: ::capnp::primitive_list::Reader<'a,i16>) -> ::capnp::Result<()> {
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(5), value, false)
    }
    #[inline]
    pub fn init_origin_nodes_travel_times(self, size: u32) -> ::capnp::primitive_list::Builder<'a,i16> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(5), size)
    }
    pub fn has_origin_nodes_travel_times(&self) -> bool {
      !self.builder.get_pointer_field(5).is_null()
    }
    #[inline]
    pub fn get_origin_nodes_distances(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,i16>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(6), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_origin_nodes_distances(&mut self, value: ::capnp::primitive_list::Reader<'a,i16>) -> ::capnp::Result<()> {
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(6), value, false)
    }
    #[inline]
    pub fn init_origin_nodes_distances(self, size: u32) -> ::capnp::primitive_list::Builder<'a,i16> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(6), size)
    }
    pub fn has_origin_nodes_distances(&self) -> bool {
      !self.builder.get_pointer_field(6).is_null()
    }
    #[inline]
    pub fn get_destination_nodes_uuids(self) -> ::capnp::Result<::capnp::text_list::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(7), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_destination_nodes_uuids(&mut self, value: ::capnp::text_list::Reader<'a>) -> ::capnp::Result<()> {
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(7), value, false)
    }
    #[inline]
    pub fn init_destination_nodes_uuids(self, size: u32) -> ::capnp::text_list::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(7), size)
    }
    pub fn has_destination_nodes_uuids(&self) -> bool {
      !self.builder.get_pointer_field(7).is_null()
    }
    #[inline]
    pub fn get_destination_nodes_travel_times(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,i16>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(8), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_destination_nodes_travel_times(&mut self, value: ::capnp::primitive_list::Reader<'a,i16>) -> ::capnp::Result<()> {
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(8), value, false)
    }
    #[inline]
    pub fn init_destination_nodes_travel_times(self, size: u32) -> ::capnp::primitive_list::Builder<'a,i16> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(8), size)
    }
    pub fn has_destination_nodes_travel_times(&self) -> bool {
      !self.builder.get_pointer_field(8).is_null()
    }
    #[inline]
    pub fn get_destination_nodes_distances(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,i16>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(9), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_destination_nodes_distances(&mut self, value: ::capnp::primitive_list::Reader<'a,i16>) -> ::capnp::Result<()> {
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(9), value, false)
    }
    #[inline]
    pub fn init_destination_nodes_distances(self, size: u32) -> ::capnp::primitive_list::Builder<'a,i16> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(9), size)
    }
    pub fn has_destination_nodes_distances(&self) -> bool {
      !self.builder.get_pointer_field(9).is_null()
    }
    #[inline]
    pub fn get_internal_id(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(10), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_internal_id(&mut self, value: ::capnp::text::Reader<'_>)  {
      self.builder.get_pointer_field(10).set_text(value);
    }
    #[inline]
    pub fn init_internal_id(self, size: u32) -> ::capnp::text::Builder<'a> {
      self.builder.get_pointer_field(10).init_text(size)
    }
    pub fn has_internal_id(&self) -> bool {
      !self.builder.get_pointer_field(10).is_null()
    }
    #[inline]
    pub fn get_data(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(11), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_data(&mut self, value: ::capnp::text::Reader<'_>)  {
      self.builder.get_pointer_field(11).set_text(value);
    }
    #[inline]
    pub fn init_data(self, size: u32) -> ::capnp::text::Builder<'a> {
      self.builder.get_pointer_field(11).init_text(size)
    }
    pub fn has_data(&self) -> bool {
      !self.builder.get_pointer_field(11).is_null()
    }
    #[inline]
    pub fn get_is_frozen(self) -> i8 {
      self.builder.get_data_field::<i8>(34)
    }
    #[inline]
    pub fn set_is_frozen(&mut self, value: i8)  {
      self.builder.set_data_field::<i8>(34, value);
    }
  }

  pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Pipeline {
      Pipeline { _typeless: typeless,  }
    }
  }
  impl Pipeline  {
  }
  mod _private {
    use capnp::private::layout;
    pub const STRUCT_SIZE: layout::StructSize = layout::StructSize { data: 7, pointers: 12 };
    pub const TYPE_ID: u64 = 0xf97d_02eb_36e1_c023;
  }

  #[repr(u16)]
  #[derive(Clone, Copy, PartialEq)]
  pub enum Mode {
    None = 0,
    Walking = 1,
    Cycling = 2,
    CarDriver = 3,
    CarPassenger = 4,
    Motorcycle = 5,
    Transit = 6,
    Paratransit = 7,
    Taxi = 8,
    SchoolBus = 9,
    OtherBus = 10,
    IntercityBus = 11,
    IntercityTrain = 12,
    Plane = 13,
    Ferry = 14,
    ParkAndRide = 15,
    KissAndRide = 16,
    BikeAndRide = 17,
    MultimodalOther = 18,
    Other = 19,
    Unknown = 20,
  }
  impl ::capnp::traits::FromU16 for Mode {
    #[inline]
    fn from_u16(value: u16) -> ::core::result::Result<Mode, ::capnp::NotInSchema> {
      match value {
        0 => ::core::result::Result::Ok(Mode::None),
        1 => ::core::result::Result::Ok(Mode::Walking),
        2 => ::core::result::Result::Ok(Mode::Cycling),
        3 => ::core::result::Result::Ok(Mode::CarDriver),
        4 => ::core::result::Result::Ok(Mode::CarPassenger),
        5 => ::core::result::Result::Ok(Mode::Motorcycle),
        6 => ::core::result::Result::Ok(Mode::Transit),
        7 => ::core::result::Result::Ok(Mode::Paratransit),
        8 => ::core::result::Result::Ok(Mode::Taxi),
        9 => ::core::result::Result::Ok(Mode::SchoolBus),
        10 => ::core::result::Result::Ok(Mode::OtherBus),
        11 => ::core::result::Result::Ok(Mode::IntercityBus),
        12 => ::core::result::Result::Ok(Mode::IntercityTrain),
        13 => ::core::result::Result::Ok(Mode::Plane),
        14 => ::core::result::Result::Ok(Mode::Ferry),
        15 => ::core::result::Result::Ok(Mode::ParkAndRide),
        16 => ::core::result::Result::Ok(Mode::KissAndRide),
        17 => ::core::result::Result::Ok(Mode::BikeAndRide),
        18 => ::core::result::Result::Ok(Mode::MultimodalOther),
        19 => ::core::result::Result::Ok(Mode::Other),
        20 => ::core::result::Result::Ok(Mode::Unknown),
        n => ::core::result::Result::Err(::capnp::NotInSchema(n)),
      }
    }
  }
  impl ::capnp::traits::ToU16 for Mode {
    #[inline]
    fn to_u16(self) -> u16 { self as u16 }
  }
  impl ::capnp::traits::HasTypeId for Mode {
    #[inline]
    fn type_id() -> u64 { 0xcd7b_3672_405d_b997u64 }
  }

  #[repr(u16)]
  #[derive(Clone, Copy, PartialEq)]
  pub enum Activity {
    None = 0,
    Home = 1,
    WorkUsual = 2,
    WorkNonUsual = 3,
    SchoolUsual = 4,
    SchoolNonUsual = 5,
    Shopping = 6,
    Leisure = 7,
    Service = 8,
    SecondaryHome = 9,
    VisitingFriends = 10,
    DropSomeone = 11,
    FetchSomeone = 12,
    Restaurant = 13,
    Medical = 14,
    Worship = 15,
    OnTheRoad = 16,
    Other = 17,
    Unknown = 18,
  }
  impl ::capnp::traits::FromU16 for Activity {
    #[inline]
    fn from_u16(value: u16) -> ::core::result::Result<Activity, ::capnp::NotInSchema> {
      match value {
        0 => ::core::result::Result::Ok(Activity::None),
        1 => ::core::result::Result::Ok(Activity::Home),
        2 => ::core::result::Result::Ok(Activity::WorkUsual),
        3 => ::core::result::Result::Ok(Activity::WorkNonUsual),
        4 => ::core::result::Result::Ok(Activity::SchoolUsual),
        5 => ::core::result::Result::Ok(Activity::SchoolNonUsual),
        6 => ::core::result::Result::Ok(Activity::Shopping),
        7 => ::core::result::Result::Ok(Activity::Leisure),
        8 => ::core::result::Result::Ok(Activity::Service),
        9 => ::core::result::Result::Ok(Activity::SecondaryHome),
        10 => ::core::result::Result::Ok(Activity::VisitingFriends),
        11 => ::core::result::Result::Ok(Activity::DropSomeone),
        12 => ::core::result::Result::Ok(Activity::FetchSomeone),
        13 => ::core::result::Result::Ok(Activity::Restaurant),
        14 => ::core::result::Result::Ok(Activity::Medical),
        15 => ::core::result::Result::Ok(Activity::Worship),
        16 => ::core::result::Result::Ok(Activity::OnTheRoad),
        17 => ::core::result::Result::Ok(Activity::Other),
        18 => ::core::result::Result::Ok(Activity::Unknown),
        n => ::core::result::Result::Err(::capnp::NotInSchema(n)),
      }
    }
  }
  impl ::capnp::traits::ToU16 for Activity {
    #[inline]
    fn to_u16(self) -> u16 { self as u16 }
  }
  impl ::capnp::traits::HasTypeId for Activity {
    #[inline]
    fn type_id() -> u64 { 0xc08b_3cc8_370e_2b85u64 }
  }
}
