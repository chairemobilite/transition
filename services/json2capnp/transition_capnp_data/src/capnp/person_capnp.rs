// @generated by the capnpc-rust plugin to the Cap'n Proto schema compiler.
// DO NOT EDIT.
// source: person.capnp


pub mod person {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl <'a> ::capnp::traits::Owned<'a> for Owned { type Reader = Reader<'a>; type Builder = Builder<'a>; }
  impl <'a> ::capnp::traits::OwnedStruct<'a> for Owned { type Reader = Reader<'a>; type Builder = Builder<'a>; }
  impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

  #[derive(Clone, Copy)]
  pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }

  impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
    #[inline]
    fn type_id() -> u64 { _private::TYPE_ID }
  }
  impl <'a,> ::capnp::traits::FromStructReader<'a> for Reader<'a,>  {
    fn new(reader: ::capnp::private::layout::StructReader<'a>) -> Reader<'a,> {
      Reader { reader,  }
    }
  }

  impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [capnp::Word]>) -> ::capnp::Result<Reader<'a,>> {
      ::core::result::Result::Ok(::capnp::traits::FromStructReader::new(reader.get_struct(default)?))
    }
  }

  impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,> Reader<'a,>  {
    pub fn reborrow(&self) -> Reader<'_,> {
      Reader { .. *self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_uuid(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
    }
    pub fn has_uuid(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_data_source_uuid(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(1), ::core::option::Option::None)
    }
    pub fn has_data_source_uuid(&self) -> bool {
      !self.reader.get_pointer_field(1).is_null()
    }
    #[inline]
    pub fn get_household_uuid(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(2), ::core::option::Option::None)
    }
    pub fn has_household_uuid(&self) -> bool {
      !self.reader.get_pointer_field(2).is_null()
    }
    #[inline]
    pub fn get_id(self) -> u32 {
      self.reader.get_data_field::<u32>(0)
    }
    #[inline]
    pub fn get_expansion_factor(self) -> f32 {
      self.reader.get_data_field::<f32>(1)
    }
    #[inline]
    pub fn get_age(self) -> i16 {
      self.reader.get_data_field::<i16>(4)
    }
    #[inline]
    pub fn get_driving_license_owner(self) -> i8 {
      self.reader.get_data_field::<i8>(10)
    }
    #[inline]
    pub fn get_transit_pass_owner(self) -> i8 {
      self.reader.get_data_field::<i8>(11)
    }
    #[inline]
    pub fn get_age_group(self) -> ::core::result::Result<crate::person_capnp::person::AgeGroup,::capnp::NotInSchema> {
      ::capnp::traits::FromU16::from_u16(self.reader.get_data_field::<u16>(6))
    }
    #[inline]
    pub fn get_gender(self) -> ::core::result::Result<crate::person_capnp::person::Gender,::capnp::NotInSchema> {
      ::capnp::traits::FromU16::from_u16(self.reader.get_data_field::<u16>(7))
    }
    #[inline]
    pub fn get_occupation(self) -> ::core::result::Result<crate::person_capnp::person::Occupation,::capnp::NotInSchema> {
      ::capnp::traits::FromU16::from_u16(self.reader.get_data_field::<u16>(8))
    }
    #[inline]
    pub fn get_usual_work_place_latitude(self) -> i32 {
      self.reader.get_data_field::<i32>(5)
    }
    #[inline]
    pub fn get_usual_work_place_longitude(self) -> i32 {
      self.reader.get_data_field::<i32>(6)
    }
    #[inline]
    pub fn get_usual_school_place_latitude(self) -> i32 {
      self.reader.get_data_field::<i32>(7)
    }
    #[inline]
    pub fn get_usual_school_place_longitude(self) -> i32 {
      self.reader.get_data_field::<i32>(8)
    }
    #[inline]
    pub fn get_usual_work_place_nodes_uuids(self) -> ::capnp::Result<::capnp::text_list::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(3), ::core::option::Option::None)
    }
    pub fn has_usual_work_place_nodes_uuids(&self) -> bool {
      !self.reader.get_pointer_field(3).is_null()
    }
    #[inline]
    pub fn get_usual_work_place_nodes_travel_times(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,i16>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(4), ::core::option::Option::None)
    }
    pub fn has_usual_work_place_nodes_travel_times(&self) -> bool {
      !self.reader.get_pointer_field(4).is_null()
    }
    #[inline]
    pub fn get_usual_work_place_nodes_distances(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,i16>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(5), ::core::option::Option::None)
    }
    pub fn has_usual_work_place_nodes_distances(&self) -> bool {
      !self.reader.get_pointer_field(5).is_null()
    }
    #[inline]
    pub fn get_usual_school_place_nodes_uuids(self) -> ::capnp::Result<::capnp::text_list::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(6), ::core::option::Option::None)
    }
    pub fn has_usual_school_place_nodes_uuids(&self) -> bool {
      !self.reader.get_pointer_field(6).is_null()
    }
    #[inline]
    pub fn get_usual_school_place_nodes_travel_times(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,i16>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(7), ::core::option::Option::None)
    }
    pub fn has_usual_school_place_nodes_travel_times(&self) -> bool {
      !self.reader.get_pointer_field(7).is_null()
    }
    #[inline]
    pub fn get_usual_school_place_nodes_distances(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,i16>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(8), ::core::option::Option::None)
    }
    pub fn has_usual_school_place_nodes_distances(&self) -> bool {
      !self.reader.get_pointer_field(8).is_null()
    }
    #[inline]
    pub fn get_internal_id(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(9), ::core::option::Option::None)
    }
    pub fn has_internal_id(&self) -> bool {
      !self.reader.get_pointer_field(9).is_null()
    }
    #[inline]
    pub fn get_data(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(10), ::core::option::Option::None)
    }
    pub fn has_data(&self) -> bool {
      !self.reader.get_pointer_field(10).is_null()
    }
    #[inline]
    pub fn get_is_frozen(self) -> i8 {
      self.reader.get_data_field::<i8>(18)
    }
    #[inline]
    pub fn get_usual_work_place_walking_travel_time_seconds(self) -> i32 {
      self.reader.get_data_field::<i32>(9)
    }
    #[inline]
    pub fn get_usual_work_place_cycling_travel_time_seconds(self) -> i32 {
      self.reader.get_data_field::<i32>(10)
    }
    #[inline]
    pub fn get_usual_work_place_driving_travel_time_seconds(self) -> i32 {
      self.reader.get_data_field::<i32>(11)
    }
    #[inline]
    pub fn get_usual_school_place_walking_travel_time_seconds(self) -> i32 {
      self.reader.get_data_field::<i32>(12)
    }
    #[inline]
    pub fn get_usual_school_place_cycling_travel_time_seconds(self) -> i32 {
      self.reader.get_data_field::<i32>(13)
    }
    #[inline]
    pub fn get_usual_school_place_driving_travel_time_seconds(self) -> i32 {
      self.reader.get_data_field::<i32>(14)
    }
  }

  pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
  impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
    #[inline]
    fn struct_size() -> ::capnp::private::layout::StructSize { _private::STRUCT_SIZE }
  }
  impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
    #[inline]
    fn type_id() -> u64 { _private::TYPE_ID }
  }
  impl <'a,> ::capnp::traits::FromStructBuilder<'a> for Builder<'a,>  {
    fn new(builder: ::capnp::private::layout::StructBuilder<'a>) -> Builder<'a, > {
      Builder { builder,  }
    }
  }

  impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Builder<'a,> {
      ::capnp::traits::FromStructBuilder::new(builder.init_struct(_private::STRUCT_SIZE))
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [capnp::Word]>) -> ::capnp::Result<Builder<'a,>> {
      ::core::result::Result::Ok(::capnp::traits::FromStructBuilder::new(builder.get_struct(_private::STRUCT_SIZE, default)?))
    }
  }

  impl <'a,> ::capnp::traits::SetPointerBuilder for Reader<'a,>  {
    fn set_pointer_builder<'b>(pointer: ::capnp::private::layout::PointerBuilder<'b>, value: Reader<'a,>, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,> Builder<'a,>  {
    pub fn into_reader(self) -> Reader<'a,> {
      ::capnp::traits::FromStructReader::new(self.builder.into_reader())
    }
    pub fn reborrow(&mut self) -> Builder<'_,> {
      Builder { .. *self }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,> {
      ::capnp::traits::FromStructReader::new(self.builder.into_reader())
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.into_reader().total_size()
    }
    #[inline]
    pub fn get_uuid(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_uuid(&mut self, value: ::capnp::text::Reader<'_>)  {
      self.builder.get_pointer_field(0).set_text(value);
    }
    #[inline]
    pub fn init_uuid(self, size: u32) -> ::capnp::text::Builder<'a> {
      self.builder.get_pointer_field(0).init_text(size)
    }
    pub fn has_uuid(&self) -> bool {
      !self.builder.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_data_source_uuid(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(1), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_data_source_uuid(&mut self, value: ::capnp::text::Reader<'_>)  {
      self.builder.get_pointer_field(1).set_text(value);
    }
    #[inline]
    pub fn init_data_source_uuid(self, size: u32) -> ::capnp::text::Builder<'a> {
      self.builder.get_pointer_field(1).init_text(size)
    }
    pub fn has_data_source_uuid(&self) -> bool {
      !self.builder.get_pointer_field(1).is_null()
    }
    #[inline]
    pub fn get_household_uuid(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(2), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_household_uuid(&mut self, value: ::capnp::text::Reader<'_>)  {
      self.builder.get_pointer_field(2).set_text(value);
    }
    #[inline]
    pub fn init_household_uuid(self, size: u32) -> ::capnp::text::Builder<'a> {
      self.builder.get_pointer_field(2).init_text(size)
    }
    pub fn has_household_uuid(&self) -> bool {
      !self.builder.get_pointer_field(2).is_null()
    }
    #[inline]
    pub fn get_id(self) -> u32 {
      self.builder.get_data_field::<u32>(0)
    }
    #[inline]
    pub fn set_id(&mut self, value: u32)  {
      self.builder.set_data_field::<u32>(0, value);
    }
    #[inline]
    pub fn get_expansion_factor(self) -> f32 {
      self.builder.get_data_field::<f32>(1)
    }
    #[inline]
    pub fn set_expansion_factor(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(1, value);
    }
    #[inline]
    pub fn get_age(self) -> i16 {
      self.builder.get_data_field::<i16>(4)
    }
    #[inline]
    pub fn set_age(&mut self, value: i16)  {
      self.builder.set_data_field::<i16>(4, value);
    }
    #[inline]
    pub fn get_driving_license_owner(self) -> i8 {
      self.builder.get_data_field::<i8>(10)
    }
    #[inline]
    pub fn set_driving_license_owner(&mut self, value: i8)  {
      self.builder.set_data_field::<i8>(10, value);
    }
    #[inline]
    pub fn get_transit_pass_owner(self) -> i8 {
      self.builder.get_data_field::<i8>(11)
    }
    #[inline]
    pub fn set_transit_pass_owner(&mut self, value: i8)  {
      self.builder.set_data_field::<i8>(11, value);
    }
    #[inline]
    pub fn get_age_group(self) -> ::core::result::Result<crate::person_capnp::person::AgeGroup,::capnp::NotInSchema> {
      ::capnp::traits::FromU16::from_u16(self.builder.get_data_field::<u16>(6))
    }
    #[inline]
    pub fn set_age_group(&mut self, value: crate::person_capnp::person::AgeGroup)  {
      self.builder.set_data_field::<u16>(6, value as u16)
    }
    #[inline]
    pub fn get_gender(self) -> ::core::result::Result<crate::person_capnp::person::Gender,::capnp::NotInSchema> {
      ::capnp::traits::FromU16::from_u16(self.builder.get_data_field::<u16>(7))
    }
    #[inline]
    pub fn set_gender(&mut self, value: crate::person_capnp::person::Gender)  {
      self.builder.set_data_field::<u16>(7, value as u16)
    }
    #[inline]
    pub fn get_occupation(self) -> ::core::result::Result<crate::person_capnp::person::Occupation,::capnp::NotInSchema> {
      ::capnp::traits::FromU16::from_u16(self.builder.get_data_field::<u16>(8))
    }
    #[inline]
    pub fn set_occupation(&mut self, value: crate::person_capnp::person::Occupation)  {
      self.builder.set_data_field::<u16>(8, value as u16)
    }
    #[inline]
    pub fn get_usual_work_place_latitude(self) -> i32 {
      self.builder.get_data_field::<i32>(5)
    }
    #[inline]
    pub fn set_usual_work_place_latitude(&mut self, value: i32)  {
      self.builder.set_data_field::<i32>(5, value);
    }
    #[inline]
    pub fn get_usual_work_place_longitude(self) -> i32 {
      self.builder.get_data_field::<i32>(6)
    }
    #[inline]
    pub fn set_usual_work_place_longitude(&mut self, value: i32)  {
      self.builder.set_data_field::<i32>(6, value);
    }
    #[inline]
    pub fn get_usual_school_place_latitude(self) -> i32 {
      self.builder.get_data_field::<i32>(7)
    }
    #[inline]
    pub fn set_usual_school_place_latitude(&mut self, value: i32)  {
      self.builder.set_data_field::<i32>(7, value);
    }
    #[inline]
    pub fn get_usual_school_place_longitude(self) -> i32 {
      self.builder.get_data_field::<i32>(8)
    }
    #[inline]
    pub fn set_usual_school_place_longitude(&mut self, value: i32)  {
      self.builder.set_data_field::<i32>(8, value);
    }
    #[inline]
    pub fn get_usual_work_place_nodes_uuids(self) -> ::capnp::Result<::capnp::text_list::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(3), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_usual_work_place_nodes_uuids(&mut self, value: ::capnp::text_list::Reader<'a>) -> ::capnp::Result<()> {
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(3), value, false)
    }
    #[inline]
    pub fn init_usual_work_place_nodes_uuids(self, size: u32) -> ::capnp::text_list::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(3), size)
    }
    pub fn has_usual_work_place_nodes_uuids(&self) -> bool {
      !self.builder.get_pointer_field(3).is_null()
    }
    #[inline]
    pub fn get_usual_work_place_nodes_travel_times(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,i16>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(4), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_usual_work_place_nodes_travel_times(&mut self, value: ::capnp::primitive_list::Reader<'a,i16>) -> ::capnp::Result<()> {
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(4), value, false)
    }
    #[inline]
    pub fn init_usual_work_place_nodes_travel_times(self, size: u32) -> ::capnp::primitive_list::Builder<'a,i16> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(4), size)
    }
    pub fn has_usual_work_place_nodes_travel_times(&self) -> bool {
      !self.builder.get_pointer_field(4).is_null()
    }
    #[inline]
    pub fn get_usual_work_place_nodes_distances(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,i16>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(5), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_usual_work_place_nodes_distances(&mut self, value: ::capnp::primitive_list::Reader<'a,i16>) -> ::capnp::Result<()> {
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(5), value, false)
    }
    #[inline]
    pub fn init_usual_work_place_nodes_distances(self, size: u32) -> ::capnp::primitive_list::Builder<'a,i16> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(5), size)
    }
    pub fn has_usual_work_place_nodes_distances(&self) -> bool {
      !self.builder.get_pointer_field(5).is_null()
    }
    #[inline]
    pub fn get_usual_school_place_nodes_uuids(self) -> ::capnp::Result<::capnp::text_list::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(6), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_usual_school_place_nodes_uuids(&mut self, value: ::capnp::text_list::Reader<'a>) -> ::capnp::Result<()> {
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(6), value, false)
    }
    #[inline]
    pub fn init_usual_school_place_nodes_uuids(self, size: u32) -> ::capnp::text_list::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(6), size)
    }
    pub fn has_usual_school_place_nodes_uuids(&self) -> bool {
      !self.builder.get_pointer_field(6).is_null()
    }
    #[inline]
    pub fn get_usual_school_place_nodes_travel_times(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,i16>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(7), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_usual_school_place_nodes_travel_times(&mut self, value: ::capnp::primitive_list::Reader<'a,i16>) -> ::capnp::Result<()> {
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(7), value, false)
    }
    #[inline]
    pub fn init_usual_school_place_nodes_travel_times(self, size: u32) -> ::capnp::primitive_list::Builder<'a,i16> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(7), size)
    }
    pub fn has_usual_school_place_nodes_travel_times(&self) -> bool {
      !self.builder.get_pointer_field(7).is_null()
    }
    #[inline]
    pub fn get_usual_school_place_nodes_distances(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,i16>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(8), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_usual_school_place_nodes_distances(&mut self, value: ::capnp::primitive_list::Reader<'a,i16>) -> ::capnp::Result<()> {
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(8), value, false)
    }
    #[inline]
    pub fn init_usual_school_place_nodes_distances(self, size: u32) -> ::capnp::primitive_list::Builder<'a,i16> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(8), size)
    }
    pub fn has_usual_school_place_nodes_distances(&self) -> bool {
      !self.builder.get_pointer_field(8).is_null()
    }
    #[inline]
    pub fn get_internal_id(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(9), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_internal_id(&mut self, value: ::capnp::text::Reader<'_>)  {
      self.builder.get_pointer_field(9).set_text(value);
    }
    #[inline]
    pub fn init_internal_id(self, size: u32) -> ::capnp::text::Builder<'a> {
      self.builder.get_pointer_field(9).init_text(size)
    }
    pub fn has_internal_id(&self) -> bool {
      !self.builder.get_pointer_field(9).is_null()
    }
    #[inline]
    pub fn get_data(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(10), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_data(&mut self, value: ::capnp::text::Reader<'_>)  {
      self.builder.get_pointer_field(10).set_text(value);
    }
    #[inline]
    pub fn init_data(self, size: u32) -> ::capnp::text::Builder<'a> {
      self.builder.get_pointer_field(10).init_text(size)
    }
    pub fn has_data(&self) -> bool {
      !self.builder.get_pointer_field(10).is_null()
    }
    #[inline]
    pub fn get_is_frozen(self) -> i8 {
      self.builder.get_data_field::<i8>(18)
    }
    #[inline]
    pub fn set_is_frozen(&mut self, value: i8)  {
      self.builder.set_data_field::<i8>(18, value);
    }
    #[inline]
    pub fn get_usual_work_place_walking_travel_time_seconds(self) -> i32 {
      self.builder.get_data_field::<i32>(9)
    }
    #[inline]
    pub fn set_usual_work_place_walking_travel_time_seconds(&mut self, value: i32)  {
      self.builder.set_data_field::<i32>(9, value);
    }
    #[inline]
    pub fn get_usual_work_place_cycling_travel_time_seconds(self) -> i32 {
      self.builder.get_data_field::<i32>(10)
    }
    #[inline]
    pub fn set_usual_work_place_cycling_travel_time_seconds(&mut self, value: i32)  {
      self.builder.set_data_field::<i32>(10, value);
    }
    #[inline]
    pub fn get_usual_work_place_driving_travel_time_seconds(self) -> i32 {
      self.builder.get_data_field::<i32>(11)
    }
    #[inline]
    pub fn set_usual_work_place_driving_travel_time_seconds(&mut self, value: i32)  {
      self.builder.set_data_field::<i32>(11, value);
    }
    #[inline]
    pub fn get_usual_school_place_walking_travel_time_seconds(self) -> i32 {
      self.builder.get_data_field::<i32>(12)
    }
    #[inline]
    pub fn set_usual_school_place_walking_travel_time_seconds(&mut self, value: i32)  {
      self.builder.set_data_field::<i32>(12, value);
    }
    #[inline]
    pub fn get_usual_school_place_cycling_travel_time_seconds(self) -> i32 {
      self.builder.get_data_field::<i32>(13)
    }
    #[inline]
    pub fn set_usual_school_place_cycling_travel_time_seconds(&mut self, value: i32)  {
      self.builder.set_data_field::<i32>(13, value);
    }
    #[inline]
    pub fn get_usual_school_place_driving_travel_time_seconds(self) -> i32 {
      self.builder.get_data_field::<i32>(14)
    }
    #[inline]
    pub fn set_usual_school_place_driving_travel_time_seconds(&mut self, value: i32)  {
      self.builder.set_data_field::<i32>(14, value);
    }
  }

  pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Pipeline {
      Pipeline { _typeless: typeless,  }
    }
  }
  impl Pipeline  {
  }
  mod _private {
    use capnp::private::layout;
    pub const STRUCT_SIZE: layout::StructSize = layout::StructSize { data: 8, pointers: 11 };
    pub const TYPE_ID: u64 = 0xe900_aec8_5ed9_b47f;
  }

  #[repr(u16)]
  #[derive(Clone, Copy, PartialEq)]
  pub enum AgeGroup {
    None = 0,
    Ag0004 = 1,
    Ag0509 = 2,
    Ag1014 = 3,
    Ag1519 = 4,
    Ag2024 = 5,
    Ag2529 = 6,
    Ag3034 = 7,
    Ag3539 = 8,
    Ag4044 = 9,
    Ag4549 = 10,
    Ag5054 = 11,
    Ag5559 = 12,
    Ag6064 = 13,
    Ag6569 = 14,
    Ag7074 = 15,
    Ag7579 = 16,
    Ag8084 = 17,
    Ag8589 = 18,
    Ag9094 = 19,
    Ag95plus = 20,
    Unknown = 21,
  }
  impl ::capnp::traits::FromU16 for AgeGroup {
    #[inline]
    fn from_u16(value: u16) -> ::core::result::Result<AgeGroup, ::capnp::NotInSchema> {
      match value {
        0 => ::core::result::Result::Ok(AgeGroup::None),
        1 => ::core::result::Result::Ok(AgeGroup::Ag0004),
        2 => ::core::result::Result::Ok(AgeGroup::Ag0509),
        3 => ::core::result::Result::Ok(AgeGroup::Ag1014),
        4 => ::core::result::Result::Ok(AgeGroup::Ag1519),
        5 => ::core::result::Result::Ok(AgeGroup::Ag2024),
        6 => ::core::result::Result::Ok(AgeGroup::Ag2529),
        7 => ::core::result::Result::Ok(AgeGroup::Ag3034),
        8 => ::core::result::Result::Ok(AgeGroup::Ag3539),
        9 => ::core::result::Result::Ok(AgeGroup::Ag4044),
        10 => ::core::result::Result::Ok(AgeGroup::Ag4549),
        11 => ::core::result::Result::Ok(AgeGroup::Ag5054),
        12 => ::core::result::Result::Ok(AgeGroup::Ag5559),
        13 => ::core::result::Result::Ok(AgeGroup::Ag6064),
        14 => ::core::result::Result::Ok(AgeGroup::Ag6569),
        15 => ::core::result::Result::Ok(AgeGroup::Ag7074),
        16 => ::core::result::Result::Ok(AgeGroup::Ag7579),
        17 => ::core::result::Result::Ok(AgeGroup::Ag8084),
        18 => ::core::result::Result::Ok(AgeGroup::Ag8589),
        19 => ::core::result::Result::Ok(AgeGroup::Ag9094),
        20 => ::core::result::Result::Ok(AgeGroup::Ag95plus),
        21 => ::core::result::Result::Ok(AgeGroup::Unknown),
        n => ::core::result::Result::Err(::capnp::NotInSchema(n)),
      }
    }
  }
  impl ::capnp::traits::ToU16 for AgeGroup {
    #[inline]
    fn to_u16(self) -> u16 { self as u16 }
  }
  impl ::capnp::traits::HasTypeId for AgeGroup {
    #[inline]
    fn type_id() -> u64 { 0xf694_a97e_7333_2360u64 }
  }

  #[repr(u16)]
  #[derive(Clone, Copy, PartialEq)]
  pub enum Gender {
    None = 0,
    Female = 1,
    Male = 2,
    Custom = 3,
    Unknown = 4,
  }
  impl ::capnp::traits::FromU16 for Gender {
    #[inline]
    fn from_u16(value: u16) -> ::core::result::Result<Gender, ::capnp::NotInSchema> {
      match value {
        0 => ::core::result::Result::Ok(Gender::None),
        1 => ::core::result::Result::Ok(Gender::Female),
        2 => ::core::result::Result::Ok(Gender::Male),
        3 => ::core::result::Result::Ok(Gender::Custom),
        4 => ::core::result::Result::Ok(Gender::Unknown),
        n => ::core::result::Result::Err(::capnp::NotInSchema(n)),
      }
    }
  }
  impl ::capnp::traits::ToU16 for Gender {
    #[inline]
    fn to_u16(self) -> u16 { self as u16 }
  }
  impl ::capnp::traits::HasTypeId for Gender {
    #[inline]
    fn type_id() -> u64 { 0xa79f_42e7_2d34_38ebu64 }
  }

  #[repr(u16)]
  #[derive(Clone, Copy, PartialEq)]
  pub enum Occupation {
    None = 0,
    FullTimeWorker = 1,
    PartTimeWorker = 2,
    FullTimeStudent = 3,
    PartTimeStudent = 4,
    WorkerAndStudent = 5,
    Retired = 6,
    AtHome = 7,
    Other = 8,
    NonApplicable = 9,
    Unknown = 10,
  }
  impl ::capnp::traits::FromU16 for Occupation {
    #[inline]
    fn from_u16(value: u16) -> ::core::result::Result<Occupation, ::capnp::NotInSchema> {
      match value {
        0 => ::core::result::Result::Ok(Occupation::None),
        1 => ::core::result::Result::Ok(Occupation::FullTimeWorker),
        2 => ::core::result::Result::Ok(Occupation::PartTimeWorker),
        3 => ::core::result::Result::Ok(Occupation::FullTimeStudent),
        4 => ::core::result::Result::Ok(Occupation::PartTimeStudent),
        5 => ::core::result::Result::Ok(Occupation::WorkerAndStudent),
        6 => ::core::result::Result::Ok(Occupation::Retired),
        7 => ::core::result::Result::Ok(Occupation::AtHome),
        8 => ::core::result::Result::Ok(Occupation::Other),
        9 => ::core::result::Result::Ok(Occupation::NonApplicable),
        10 => ::core::result::Result::Ok(Occupation::Unknown),
        n => ::core::result::Result::Err(::capnp::NotInSchema(n)),
      }
    }
  }
  impl ::capnp::traits::ToU16 for Occupation {
    #[inline]
    fn to_u16(self) -> u16 { self as u16 }
  }
  impl ::capnp::traits::HasTypeId for Occupation {
    #[inline]
    fn type_id() -> u64 { 0x82dd_95ea_ca05_1112u64 }
  }
}
